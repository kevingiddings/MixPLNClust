// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_g_params
List update_g_params(Rcpp::List& GX_g, Rcpp::List& dGX_g, Rcpp::List& z_S_g, Rcpp::List& m_g, Rcpp::List& O_list, Rcpp::List& start_g, Rcpp::List& S_g, Rcpp::List& iOsigO_g, arma::vec& lib_mat, arma::mat& Y, arma::vec& mu_g, arma::mat& z, const int g, const int N);
RcppExport SEXP _MixPLNClust_update_g_params(SEXP GX_gSEXP, SEXP dGX_gSEXP, SEXP z_S_gSEXP, SEXP m_gSEXP, SEXP O_listSEXP, SEXP start_gSEXP, SEXP S_gSEXP, SEXP iOsigO_gSEXP, SEXP lib_matSEXP, SEXP YSEXP, SEXP mu_gSEXP, SEXP zSEXP, SEXP gSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type GX_g(GX_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type dGX_g(dGX_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type z_S_g(z_S_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type m_g(m_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type start_g(start_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type S_g(S_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type iOsigO_g(iOsigO_gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lib_mat(lib_matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_g(mu_gSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type g(gSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(update_g_params(GX_g, dGX_g, z_S_g, m_g, O_list, start_g, S_g, iOsigO_g, lib_mat, Y, mu_g, z, g, N));
    return rcpp_result_gen;
END_RCPP
}
// update_mu
List update_mu(Rcpp::List& m_g, Rcpp::List& O_list, Rcpp::List& iOsigO_g, arma::vec& mu_g, arma::mat z, const int d, const int g, const int N);
RcppExport SEXP _MixPLNClust_update_mu(SEXP m_gSEXP, SEXP O_listSEXP, SEXP iOsigO_gSEXP, SEXP mu_gSEXP, SEXP zSEXP, SEXP dSEXP, SEXP gSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type m_g(m_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type iOsigO_g(iOsigO_gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_g(mu_gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type g(gSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu(m_g, O_list, iOsigO_g, mu_g, z, d, g, N));
    return rcpp_result_gen;
END_RCPP
}
// update_sig
List update_sig(Rcpp::List m_g, Rcpp::List sigma_new, arma::mat sigma_g, Rcpp::List O_list, Rcpp::List iOsigO_g, arma::vec mu_g, Rcpp::List S_g, arma::mat z, const int d, const int g, const int N, const double step);
RcppExport SEXP _MixPLNClust_update_sig(SEXP m_gSEXP, SEXP sigma_newSEXP, SEXP sigma_gSEXP, SEXP O_listSEXP, SEXP iOsigO_gSEXP, SEXP mu_gSEXP, SEXP S_gSEXP, SEXP zSEXP, SEXP dSEXP, SEXP gSEXP, SEXP NSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type m_g(m_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigma_new(sigma_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_g(sigma_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type iOsigO_g(iOsigO_gSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_g(mu_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type S_g(S_gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type g(gSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sig(m_g, sigma_new, sigma_g, O_list, iOsigO_g, mu_g, S_g, z, d, g, N, step));
    return rcpp_result_gen;
END_RCPP
}
// update_sig2
List update_sig2(Rcpp::List m_g, Rcpp::List sigma_new, arma::mat sigma_g, Rcpp::List O_list, Rcpp::List iOsigO_g, arma::vec mu_g, Rcpp::List S_g, arma::mat z, const int d, const int g, const int N, const double step);
RcppExport SEXP _MixPLNClust_update_sig2(SEXP m_gSEXP, SEXP sigma_newSEXP, SEXP sigma_gSEXP, SEXP O_listSEXP, SEXP iOsigO_gSEXP, SEXP mu_gSEXP, SEXP S_gSEXP, SEXP zSEXP, SEXP dSEXP, SEXP gSEXP, SEXP NSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type m_g(m_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type sigma_new(sigma_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_g(sigma_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type iOsigO_g(iOsigO_gSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_g(mu_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type S_g(S_gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int >::type g(gSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sig2(m_g, sigma_new, sigma_g, O_list, iOsigO_g, mu_g, S_g, z, d, g, N, step));
    return rcpp_result_gen;
END_RCPP
}
// PD_check
bool PD_check(Rcpp::List& sigma_new, int G);
RcppExport SEXP _MixPLNClust_PD_check(SEXP sigma_newSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma_new(sigma_newSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(PD_check(sigma_new, G));
    return rcpp_result_gen;
END_RCPP
}
// invert_matrices
void invert_matrices(Rcpp::List& sigma, Rcpp::List& i_sigma, int G);
RcppExport SEXP _MixPLNClust_invert_matrices(SEXP sigmaSEXP, SEXP i_sigmaSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type i_sigma(i_sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    invert_matrices(sigma, i_sigma, G);
    return R_NilValue;
END_RCPP
}
// compute_pi_g
arma::rowvec compute_pi_g(const arma::mat& z, int N);
RcppExport SEXP _MixPLNClust_compute_pi_g(SEXP zSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pi_g(z, N));
    return rcpp_result_gen;
END_RCPP
}
// create_lib_mat_full
arma::mat create_lib_mat_full(const arma::rowvec& lib_mat, int N);
RcppExport SEXP _MixPLNClust_create_lib_mat_full(SEXP lib_matSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type lib_mat(lib_matSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(create_lib_mat_full(lib_mat, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_iOsigO
void compute_iOsigO(const Rcpp::List& O_list, const Rcpp::List& sigma, Rcpp::List& iOsigO);
RcppExport SEXP _MixPLNClust_compute_iOsigO(SEXP O_listSEXP, SEXP sigmaSEXP, SEXP iOsigOSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type iOsigO(iOsigOSEXP);
    compute_iOsigO(O_list, sigma, iOsigO);
    return R_NilValue;
END_RCPP
}
// compute_F_matrices
Rcpp::List compute_F_matrices(const Rcpp::List& S, const Rcpp::List& m, const Rcpp::List& O_list, const Rcpp::List& mu, const Rcpp::List& iOsigO, arma::mat& O_mat, const arma::mat& Y, const arma::vec& pi_g);
RcppExport SEXP _MixPLNClust_compute_F_matrices(SEXP SSEXP, SEXP mSEXP, SEXP O_listSEXP, SEXP muSEXP, SEXP iOsigOSEXP, SEXP O_matSEXP, SEXP YSEXP, SEXP pi_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type O_list(O_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type iOsigO(iOsigOSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type O_mat(O_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi_g(pi_gSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_F_matrices(S, m, O_list, mu, iOsigO, O_mat, Y, pi_g));
    return rcpp_result_gen;
END_RCPP
}
// aitkens_accel
Rcpp::List aitkens_accel(int it, arma::vec loglik, arma::vec a_loglik);
RcppExport SEXP _MixPLNClust_aitkens_accel(SEXP itSEXP, SEXP loglikSEXP, SEXP a_loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type it(itSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a_loglik(a_loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(aitkens_accel(it, loglik, a_loglik));
    return rcpp_result_gen;
END_RCPP
}
